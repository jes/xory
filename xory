#!/usr/bin/perl
# X or Y game
# James Stanley 2013

use strict;
use warnings;

use DBM::Deep;
use Mojolicious::Lite;

my $db = DBM::Deep->new('xory.db');

get '/' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id(1));
    #$self->render('index');
};

get '/about' => sub {
    my $self = shift;
    $self->render('about');
};

get '/play/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id')));
};

get '/play/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id));
        return;
    }

    my $gamecfg = $self->session("cfg$id") || initial_config($id);
    $gamecfg = initial_config($id) if $gamecfg->{delete_cfg};
    my $idx = $gamecfg->{idx};
    $self->session("cfg$id" => $gamecfg);

    $self->stash(
        cat1 => $db->{game}{$id}{cat1},
        cat2 => $db->{game}{$id}{cat2},
        imgurl => "/img/game/$id/$idx.jpg",
        gameid => $id,
        idx => $idx,
        npictures => $db->{game}{$id}{npictures},
    );
    $self->render('play');
};

get '/choice/:id/:idx/:cat' => sub {
    my $self = shift;

    my $id = $self->param('id');
    my $idx = $self->param('idx');

    my $gamecfg = $self->session("cfg$id") || {};
    $gamecfg->{choices}{$idx} = $self->param('cat') == 1 ? $db->{game}{$id}{cat1} : $db->{game}{$id}{cat2};
    $gamecfg->{idx} = $idx + 1;
    $self->session("cfg$id" => $gamecfg);

    if ($gamecfg->{idx} <= $db->{game}{$id}{npictures}) {
        $self->redirect_to("/play/$id/" . gamename($id));
    } else {
        $self->redirect_to("/finish/$id/" . gamename($id));
    }
};

get '/finish/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id'), 'finish'));
};

get '/finish/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id, 'finish'));
        return;
    }

    my $gamecfg = $self->session("cfg$id") || {};
    $gamecfg->{delete_cfg} = 1;
    $self->session("cfg$id" => $gamecfg);

    my @status;
    my $ncorrect = 0;
    for my $i (1 .. $db->{game}{$id}{npictures}) {
        push @status, {
            idx => $i,
            imgurl => "/img/game/$id/$i.jpg",
            category => $db->{game}{$id}{category}[$i-1],
            yousaid => $gamecfg->{choices}{$i},
        };
        $ncorrect++ if $db->{game}{$id}{category}[$i-1] eq $gamecfg->{choices}{$i};
    }

    $self->stash(
        gameid => $id,
        gamename => gamename($id),
        status => \@status,
        npictures => $db->{game}{$id}{npictures},
        ncorrect => $ncorrect,
    );
    $self->render('finish');
};

get '/create' => sub {
    my $self = shift;
    $self->render('create');
};

post '/create' => sub {
    my $self = shift;

    if (!defined $self->param('cat1') || !defined $self->param('cat2')) {
        $self->flash(error => 'Please enter categories.');
        $self->redirect_to('/create');
        return;
    }

    my $id = ++$db->{ngames};

    $db->{game}{$id} = {
        cat1 => $self->param('cat1'),
        cat2 => $self->param('cat2'),
        category => [],
        npictures => 0,
    };

    my $perms = $self->session('perms') || {};
    $perms->{$id} = 1;
    $self->session(perms => $perms);

    $self->redirect_to(url_for_id($id, 'add-pics'));
};

get '/add-pics/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id'), 'add-pics'));
};

get '/add-pics/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id, 'add-pics'));
        return;
    }

    my $perms = $self->session('perms') || {};

    if (!$perms->{$id}) {
        $self->flash(error => 'Insufficient permission to edit that game.');
        $self->redirect_to('/create');
        return;
    }

    $self->render('add-pics');
};

app->start;

sub url_for_id {
    my $id = shift;
    my $type = shift || 'play';

    return "/$type/$id/" . gamename($id);
}

sub initial_config {
    my $id = shift;

    return {
        idx => 1,
        choices => {},
    };
}

sub gamename {
    my $id = shift;

    my $cat1 = $db->{game}{$id}{cat1};
    my $cat2 = $db->{game}{$id}{cat2};

    $cat1 =~ s/[^a-zA-Z0-9_]//g;
    $cat2 =~ s/[^a-zA-Z0-9_]//g;

    return "$cat1-or-$cat2";
}
