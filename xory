#!/usr/bin/perl
# X or Y game
# James Stanley 2013

use strict;
use warnings;

use AnyEvent::Util;
use DBM::Deep;
use Image::Magick;
use List::Util qw(shuffle);
use Mojolicious::Lite;
use POSIX qw(tmpnam);

my $db = DBM::Deep->new('xory.db');

helper 'baseurl' => sub {
    return 'http://xory.pm';
};

get '/' => sub {
    my $self = shift;

    $self->stash(
        games => [ suggest_games() ],
        jumbotron => 1,
    );
    $self->render('index');
};

get '/popular' => sub {
    my $self = shift;

    $self->stash(
        games => [ suggest_games() ],
        jumbotron => 0,
    );
    $self->render('index');
};

get '/about' => sub {
    my $self = shift;
    $self->render('about');
};

get '/play/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id')));
};

get '/play/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id));
        return;
    }
    if (!exists $db->{game}{$id}) {
        $self->flash(error => 'No such game.');
        $self->redirect_to('/popular');
        return;
    }

    my $gamecfg = $self->session("cfg$id") || initial_config($id);
    $gamecfg = initial_config($id) if $gamecfg->{delete_cfg};
    my $idx = $gamecfg->{idx};
    $self->session("cfg$id" => $gamecfg);

    if ($idx > $db->{game}{$id}{npictures}) {
        $self->redirect_to(url_for_id($id, 'finish'));
        return;
    }

    $self->stash(
        cat1 => $db->{game}{$id}{cat1},
        cat2 => $db->{game}{$id}{cat2},
        descr => $db->{game}{$id}{descr},
        imgurl => "/$db->{game}{$id}{pictures}[$idx-1]{file}",
        gameid => $id,
        idx => $idx,
        npictures => $db->{game}{$id}{npictures},
        ncorrect => $gamecfg->{ncorrect},
    );
    $self->res->headers->cache_control('no-cache');
    $self->render('play');
};

get '/choice/:id/:idx/:cat' => sub {
    my $self = shift;

    my $id = $self->param('id');
    my $idx = $self->param('idx');

    my $gamecfg = $self->session("cfg$id") || {};
    $gamecfg->{choices}{$idx} = $self->param('cat') == 1 ? $db->{game}{$id}{cat1} : $db->{game}{$id}{cat2};
    $gamecfg->{ncorrect}++ if $gamecfg->{choices}{$idx} eq $db->{game}{$id}{pictures}[$idx-1]{category};
    $gamecfg->{idx} = $idx + 1;
    $self->session("cfg$id" => $gamecfg);

    $self->redirect_to("/review/$id/" . gamename($id));
};

get '/review/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id'), 'review'));
};

get '/review/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id, 'review'));
        return;
    }
    if (!exists $db->{game}{$id}) {
        $self->flash(error => 'No such game.');
        $self->redirect_to('/popular');
        return;
    }

    my $gamecfg = $self->session("cfg$id") || {};

    my $nexturl = $gamecfg->{idx} <= $db->{game}{$id}{npictures} ?
        "/play/$id/" . gamename($id) :
        "/finish/$id/" . gamename($id);

    $self->stash(
        category => $db->{game}{$id}{pictures}[$gamecfg->{idx}-2]{category},
        descr => $db->{game}{$id}{descr},
        picdescr => $db->{game}{$id}{pictures}[$gamecfg->{idx}-2]{descr},
        imgurl => "/$db->{game}{$id}{pictures}[$gamecfg->{idx}-2]{file}",
        nexturl => $nexturl,
        idx => $gamecfg->{idx}-1,
        npictures => $db->{game}{$id}{npictures},
        ncorrect => $gamecfg->{ncorrect},
    );
    $self->res->headers->cache_control('no-cache');
    $self->render('review');
};

get '/finish/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id'), 'finish'));
};

get '/finish/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id, 'finish'));
        return;
    }
    if (!exists $db->{game}{$id}) {
        $self->flash(error => 'No such game.');
        $self->redirect_to('/popular');
        return;
    }

    my $gamecfg = $self->session("cfg$id") || {};
    $gamecfg->{delete_cfg} = 1;
    $self->session("cfg$id" => $gamecfg);

    my @status;
    my $ncorrect = 0;
    for my $i (1 .. $db->{game}{$id}{npictures}) {
        push @status, {
            idx => $i,
            imgurl => "/$db->{game}{$id}{pictures}[$i-1]{file}",
            category => $db->{game}{$id}{pictures}[$i-1]{category},
            yousaid => $gamecfg->{choices}{$i},
        };
        $ncorrect++ if $db->{game}{$id}{pictures}[$i-1]{category} eq $gamecfg->{choices}{$i};
    }

    $self->stash(
        descr => $db->{game}{$id}{descr},
        gameid => $id,
        gamename => gamename($id),
        status => \@status,
        npictures => $db->{game}{$id}{npictures},
        ncorrect => $ncorrect,
    );
    $self->res->headers->cache_control('no-cache');
    $self->render('finish');
};

get '/create' => sub {
    my $self = shift;
    $self->render('create');
};

post '/create' => sub {
    my $self = shift;

    if (!defined $self->param('cat1') || !defined $self->param('cat2')) {
        $self->flash(error => 'Please enter categories.');
        $self->redirect_to('/create');
        return;
    }

    my $id = ++$db->{ngames};

    $db->{game}{$id} = {
        cat1 => $self->param('cat1'),
        cat2 => $self->param('cat2'),
        descr => $self->param('descr'),
        pictures => [],
        npictures => 0,
    };

    give_perm($self, $id);

    $self->redirect_to(url_for_id($id, 'add-pics'));
};

get '/add-pics/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id'), 'add-pics'));
};

get '/add-pics/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($id, 'add-pics'));
        return;
    }

    if (!has_perm($self, $id)) {
        $self->flash(error => 'Insufficient permission to edit that game.');
        $self->redirect_to('/create');
        return;
    }

    my @pictures;
    for my $i (1 .. $db->{game}{$id}{npictures}) {
        push @pictures, {
            idx => $i,
            imgurl => "/$db->{game}{$id}{pictures}[$i-1]{file}",
            category => $db->{game}{$id}{pictures}[$i-1]{category},
            descr => $db->{game}{$id}{pictures}[$i-1]{descr},
        };
    }

    $self->stash(
        cat1 => $db->{game}{$id}{cat1},
        cat2 => $db->{game}{$id}{cat2},
        gameid => $id,
        gamename => gamename($id),
        npictures => $db->{game}{$id}{npictures},
        pictures => \@pictures,
    );
    $self->render('add-pics');
};

get '/shuffle-pics/:id' => sub {
    my $self = shift;
    $self->redirect_to(url_for_id($self->param('id'), 'shuffle-pics'));
};

get '/shuffle-pics/:id/:name' => sub {
    my $self = shift;
    my $id = $self->param('id');
    if ($self->param('name') ne gamename($id)) {
        $self->redirect_to(url_for_id($self->param('id'), 'shuffle-pics'));
        return;
    }

    if (!has_perm($self, $id)) {
        $self->flash(error => 'Insufficient permission to edit that game.');
        $self->redirect_to('/create');
        return;
    }

    my @p = @{ $db->{game}{$id}{pictures} };
    @p = map { +{ file => $_->{file}, category => $_->{category} } } @p;
    @p = shuffle @p;
    $db->{game}{$id}{pictures} = \@p;

    $self->redirect_to(url_for_id($self->param('id'), 'add-pics'));
};

get '/wizard' => sub {
    my $self = shift;
    $self->session(wizard => 1) if $db->{enable_wizard};
    $self->redirect_to('/');
};

get '/unwizard' => sub {
    my $self = shift;
    $self->session(wizard => 0);
    $self->redirect_to('/');
};

post '/add-pic' => sub {
    my $self = shift;
    my $id = $self->param('gameid');

    if (!defined $id || $id !~ /^\d+$/) {
        $self->flash(error => 'Something went wrong.');
        $self->redirect_to('/create');
        return;
    }

    if (!has_perm($self, $id)) {
        $self->flash(error => 'Insufficient permission to edit that game.');
        $self->redirect_to('/create');
        return;
    }

    my $category = $self->param('category');
    my $descr = $self->param('descr');
    my $imgfile = $self->req->upload('img');

    fork_call {
        handle_uploaded_pic($id, $category, $descr, $imgfile);
    } sub {
        if ($@) {
            print STDERR "$@";
            $self->flash(error => 'Something went wrong while processing that image. Sorry!');
        }
        $self->redirect_to(url_for_id($id, 'add-pics'));
    };
};

post '/update-descr' => sub {
    my $self = shift;
    my $id = $self->param('gameid');

    if (!defined $id || $id !~ /^\d+$/) {
        $self->flash(error => 'Something went wrong.');
        $self->redirect_to('/create');
        return;
    }

    if (!has_perm($self, $id)) {
        $self->flash(error => 'Insufficient permission to edit that game.');
        $self->redirect_to('/create');
        return;
    }

    $db->{game}{$id}{pictures}[$self->param('idx')-1]{descr} = $self->param('descr');
    $self->redirect_to(url_for_id($id, 'add-pics'));
};

post '/delete-pic' => sub {
    my $self = shift;
    my $id = $self->param('gameid');

    if (!defined $id || $id !~ /^\d+$/) {
        $self->flash(error => 'Something went wrong.');
        $self->redirect_to('/create');
        return;
    }

    if (!has_perm($self, $id)) {
        $self->flash(error => 'Insufficient permission to edit that game.');
        $self->redirect_to('/create');
        return;
    }

    my $idx = $self->param('idx');
    if (!defined $idx || $id !~ /^\d+$/) {
        $self->flash(error => 'Something went wrong.');
        $self->redirect_to(url_for_id($id, 'add-pics'));
        return;
    }

    for my $i ($idx .. $db->{game}{$id}{npictures}-1) {
        my $i1 = $i+1;
        rename "public/game/$id/$i1.jpg", "public/game/$i.jpg";
        $db->{game}{$id}{pictures}[$i-1] = $db->{game}{$id}{pictures}[$i];
    }
    pop @{ $db->{game}{$id}{pictures} };
    $db->{game}{$id}{npictures}--;

    $self->redirect_to(url_for_id($id, 'add-pics'));
};

app->secret($db->{passphrase}) if $db->{passphrase};
app->start;

sub url_for_id {
    my $id = shift;
    my $type = shift || 'play';

    return "/$type/$id/" . gamename($id);
}

sub initial_config {
    my $id = shift;

    return {
        idx => 1,
        choices => {},
        ncorrect => 0,
    };
}

sub gamename {
    my $id = shift;

    return 'no-such-game' if !exists $db->{game}{$id};

    my $cat1 = $db->{game}{$id}{cat1};
    my $cat2 = $db->{game}{$id}{cat2};

    $cat1 =~ s/[^a-zA-Z0-9_]//g;
    $cat2 =~ s/[^a-zA-Z0-9_]//g;

    return lc "$cat1-or-$cat2";
}

sub random_id {
    return sprintf("%08x%08x", int(rand(2**32)), int(rand(2**32)));
}

sub handle_uploaded_pic {
    my ($id, $category, $descr, $img) = @_;

    mkdir "public/img/game/$id";

    my $tmp_path = tmpnam();
    $img->move_to($tmp_path);

    my $im = Image::Magick->new();
    my $err = $im->Read($tmp_path);
    die $err if $err;

    $err = $im->Scale(geometry => '450x350');
    die $err if $err;

    my $file = "img/game/$id/" . random_id() . ".jpg";

    $err = $im->Write("public/$file");
    die $err if $err;

    push @{ $db->{game}{$id}{pictures} }, {
        category => $category,
        file => $file,
        descr => $descr,
    };
    $db->{game}{$id}{npictures}++;
}

sub give_perm {
    my ($self, $id) = @_;

    my $perms = $self->session('perms') || {};
    $perms->{$id} = 1;
    $self->session(perms => $perms);
}

sub has_perm {
    my ($self, $id) = @_;

    my $perms = $self->session('perms') || {};
    return $perms->{$id} || $self->session('wizard');
}

sub ucwords {
   my $s = lc shift;
   $s =~ s/\b(\w)/\u$1/g;
   return $s;
}

sub suggest_games {
    my $n = shift;

    my @ids = @{ $db->{suggest} };
    @ids = @ids[0..$n-1] if $n;

    my @games;
    for my $i (@ids) {
        push @games, {
            cat1 => ucwords($db->{game}{$i}{cat1}),
            cat2 => ucwords($db->{game}{$i}{cat2}),
            imgurl => "/$db->{game}{$i}{pictures}[0]{file}",
            descr => $db->{game}{$i}{descr},
            playurl => url_for_id($i),
        };
    }
    return @games;
}
